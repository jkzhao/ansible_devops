
使用ssh密码方式登录主机，需要在ansible主机上安装sshpass。
Mac:
    brew install sshpass
CentOS:
    yum install sshpass
强烈建议不使用ssh密码方式登录。

1.核心类
from ansible.parsing.dataloader import DataLoader  #用于读取yaml、json格式的文件，所在模块ansible.parsing.dataloader
from ansible.vars.manager import VariableManager  #用于存储各类变量信息
from ansible.inventory.manager import InventoryManager #用于导入inventory文件
from ansible.inventory.host import Host #操作单个主机或者主机组信息
from ansible.inventory.group import Group
from ansible.playbook.play import Play  #用于存储执行hosts的角色信息，所在模块ansible.playbook.play
from ansible.executor.task_queue_manager import TaskQueueManager #ansible底层用到的任务队列
from ansible.plugins.callback import CallbackBase #状态回调，各种成功失败的状态
from ansible.executor.playbook_executor import PlaybookExecutor #核心类执行playbook副本

2.InventoryManager
管理主机、主机组信息

（1）添加主机到指定主机组 add_host()
（2）查看主机组资源 get_groups_dict()
（3）获取指定的主机对象 get_host()


3.VariableManager
（1）查看变量方法 get_vars()
（2）设置或修改主机变量方法 set_host_variable()
（3）添加扩展变量 extra_vars 这不是方法，是对象的属性


4.ad-hoc模式调用
ansible -m command -a "ls /tmp" testgroup -i /etc/ansible/hosts -f 5
        --------------------------------- --------------------- ----
                  执行对象和模块              资源资产配置清单     执行选项

资源资产配置清单            执行选项      执行对象和模块
InventoryManager         Options()         Play()
      ↓                     ↓               ↓
VariableManager             ↓               ↓
      ↓                     ↓               ↓
                 最后通过TaskQueueManager()执行


5.playbook模式调用
ansible-playbook webserver.yml -i /etc/ansible/hosts -f 5
                 ------------- --------------------- ----
                   剧本文件       资源资产配置清单      执行选项

资源资产配置清单            执行选项
InventoryManager         Options()
      ↓                     ↓
VariableManager             ↓
      ↓                     ↓
     最后通过PlaybookExecutor()执行

6.callback改写
（1）通过子类继承父类(callbackbase)
（2）通过子类改写父类的部分方法
    v2_runner_on_unreachable
    v2_runner_on_ok
    v2_runner_on_failed

    为什么要重写callback？自定义输出格式，json格式输出

自动化任务接口设计
    对ansible的核心类功能进行封装，提供API接口给前端
    URL层：Django url路由实现请求url跳转
    view层：Django逻辑视图实现任务逻辑处理
    util层: ansible实现ad-hoc、playbook功能封装

    数据库事件记录和状态记录：
        Mongodb实现事件日志记录 pymongo
        Redis任务锁功能和状态记录 redis

        事件日志的意义：
            提交任务时，能实时追踪任务的执行进展
            {"taskid":self.task_id, "time":time, "id":id, "desc":record_info}

        redis任务锁功能和状态记录
            使用redis实现任务加锁
            为什么加锁？执行ad-hoc任务时，任务是按照顺序一个一个执行的，任务1执行完，在执行任务2。
            但是前台提交的人不懂这些，他随意地去提交，他提交完第一个任务后，马上又提交了一个任务。
            所以为了确保第一个任务执行完在执行第二个任务，在工程里面加一个锁。

    测试：
        1.提交ad-hoc任务
            postman发送请求：
            {
              "taskid": "123123",
              "mod_type": "shell",
              "exec_args": "touch /tmp/wiscom",
              "group_name": "test",
              "sn_key": ["b827eb97580d"]
            }
            响应：
            {
                "info": {
                    "failed": {
                        "3b0dcc9f-a5ba-4a29-bf1a-e2b0a85725ac": {
                            "failed": true,
                            "msg": "to use the 'ssh' connection type with passwords, you must install the sshpass program"
                        }
                    },
                    "success": {},
                    "unreachable": {}
                },
                "status": "success"
            }

        2.获取某个任务的事件日志
            浏览器输入网址发送请求：http://127.0.0.1:8000/ansible/adhoclog/?taskid=123124


